"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import sys
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-#r$(co_f=@u(^f6s7lt#y(8(k$5^y^g7x#f!)sc(ez-#9c$%9i'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['51.21.132.18', 'localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    "rest_framework_simplejwt.token_blacklist",
    "pytest_django",
    'users',
    "books",
    "drf_spectacular",
]

SPECTACULAR_SETTINGS = {
    "TITLE": "FictionExpress API",
    "DESCRIPTION": """
        Welcome to the **FictionExpress API**

        This API allows **editors** and **readers** to interact with the FictionExpress book catalog.  
        It is designed to easily integrate with web or mobile platforms and offers secure JWT-based authentication.

        ---

        ### Authentication

        - To access protected endpoints, you must authenticate with JWT.
        - Create a user via `POST /api/users/`.
        - Obtain your token via `POST /api/users/login/`.
        - Then, click the **Authorize** button and enter the token as: <access_token>.
        - To log out, use `POST /api/users/logout/`.

        ---

        ### User Roles

        - **Editors**  
        - Create, update, and delete books and pages.
        - **Readers**  
        - Can only view books and their pages.

        ---

        ### Main Endpoints

        - `POST /api/users/login/` â†’ Log in  
        - `POST /api/users/logout/` â†’ Log out  
        - `GET /api/books/` â†’ List books  
        - `POST /api/books/` â†’ Create book (editors)  
        - `GET /api/books/{id}/pages/` â†’ View book pages  
        - `POST /api/books/{id}/pages/` â†’ Create page (editors)

        ---

        ### Additional Notes

        - All endpoints return responses in JSON format.
        - This documentation is interactive: you can test the endpoints directly from here.
        - Remember to use pagination to get results in parts (`?page=1&page_size=10`).

        ---
        """
    ,
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": True,
    },
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_THROTTLE_RATES': {
        'user': '5/minute', 
    },
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'fictionexpress_db',
        'USER': 'fictionexpress_user',
        'PASSWORD': '1234',
        'HOST': 'db',
        'PORT': '3306',
    }
}

if "pytest" in sys.modules:
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': ':memory:',
    }

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{asctime} - {name} - {levelname} - {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} - {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file": {
            "level": "INFO",  # ðŸ”¹ Set minimum logging level to INFO
            "class": "logging.FileHandler",
            "filename": os.path.join(BASE_DIR, "logs/debug.log"),
            "formatter": "verbose",
        },
        "console": {
            "level": "WARNING",  # ðŸ”¹ Show only warnings and errors in the console
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file", "console"],
            "level": "WARNING",  # ðŸ”¹ Ignore DEBUG logs from Django
            "propagate": True,
        },
        "django.utils.autoreload": {
            "handlers": ["file"],
            "level": "ERROR",  # ðŸ”¹ Hide autoreload DEBUG logs
            "propagate": False,
        },
        "rest_framework": {
            "handlers": ["file"],
            "level": "ERROR",  # ðŸ”¹ Suppress unnecessary DRF logs
            "propagate": False,
        },
        "users": {
            "handlers": ["file", "console"],
            "level": "INFO",  # ðŸ”¹ Your app's logs at INFO level
            "propagate": False,
        },
        "books": {
            "handlers": ["file", "console"],
            "level": "INFO",
            "propagate": False,
        },
    },
}

AUTH_USER_MODEL = 'users.User'

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=15),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
    "AUTH_HEADER_TYPES": ("Bearer",),
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
